{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\"; // array in local storage for registered users\n\nconst usersKey = 'angular-10-registration-login-example-users';\nlet users = JSON.parse(localStorage.getItem(usersKey)) || [];\n\nconst express = require(\"express\");\n\nconst app = express(); // This is your test secret API key.\n\nconst stripe = require(\"stripe\")('sk_test_51KL4GWIFktbt3BSCiCYrSEVtUJj5TF9aq3eYCgmDwFge5RnD9n5ZJC5a23Ve227aJ9rRIFhHlgWqIjcu1jHArX1k00jNL4w67g');\n\napp.use(express.static(\"public\"));\napp.use(express.json());\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return handleRoute();\n\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/users/authenticate') && method === 'POST':\n            return authenticate();\n\n          case url.endsWith('/users/register') && method === 'POST':\n            return register();\n\n          case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n            return getUserById();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n            return updateUser();\n\n          case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      } // route functions\n\n\n      function authenticate() {\n        const {\n          username,\n          password\n        } = body;\n        const user = users.find(x => x.username === username && x.password === password);\n        if (!user) return error('Username or password is incorrect');\n        return ok(Object.assign(Object.assign({}, basicDetails(user)), {\n          token: 'fake-jwt-token'\n        }));\n      }\n\n      function register() {\n        const user = body;\n\n        if (users.find(x => x.username === user.username)) {\n          return error('Username \"' + user.username + '\" is already taken');\n        }\n\n        user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n        users.push(user);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n\n      function getUsers() {\n        if (!isLoggedIn()) return unauthorized();\n        return ok(users.map(x => basicDetails(x)));\n      }\n\n      function getUserById() {\n        if (!isLoggedIn()) return unauthorized();\n        const user = users.find(x => x.id === idFromUrl());\n        return ok(basicDetails(user));\n      }\n\n      function updateUser() {\n        if (!isLoggedIn()) return unauthorized();\n        let params = body;\n        let user = users.find(x => x.id === idFromUrl()); // only update password if entered\n\n        if (!params.password) {\n          delete params.password;\n        } // update and save user\n\n\n        Object.assign(user, params);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n\n      function deleteUser() {\n        if (!isLoggedIn()) return unauthorized();\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      } // helper functions\n\n\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);\n      }\n\n      function unauthorized() {\n        return throwError({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n      }\n\n      function basicDetails(user) {\n        const {\n          id,\n          username,\n          firstName,\n          lastName,\n          email\n        } = user;\n        return {\n          id,\n          username,\n          firstName,\n          lastName,\n          email\n        };\n      }\n\n      function isLoggedIn() {\n        return headers.get('Authorization') === 'Bearer fake-jwt-token';\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n    }\n\n  }\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};\n\nconst calculateOrderAmount = items => {\n  // Replace this constant with a calculation of the order's amount\n  // Calculate the order total on the server to prevent\n  // people from directly manipulating the amount on the client\n  return 1000;\n};\n\napp.post(\"/create-payment-intent\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    items\n  } = req.body; // Create a PaymentIntent with the order amount and currency\n\n  const paymentIntent = yield stripe.paymentIntents.create({\n    amount: calculateOrderAmount(items),\n    currency: \"eur\",\n    automatic_payment_methods: {\n      enabled: true\n    }\n  });\n  res.send({\n    clientSecret: paymentIntent.client_secret\n  });\n}));\napp.listen(4200, () => console.log(\"Node server listening on port 4200!\"));","map":null,"metadata":{},"sourceType":"module"}